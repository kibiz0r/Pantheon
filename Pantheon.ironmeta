using System;
using System.Linq.Expressions;

ironmeta Pantheon<char, Expression> : IronMeta.Matcher.CharMatcher<Expression, _Pantheon_Item>
{
    // Basic Rules
    Terminal            = ~. | Whitespace | Operator | "Terminal";
    Digit               = .:n ?(n >= '0' && n <= '9');
    Number              = NumberWithDecimal | WholeNumber;
    WholeNumber         = '-'? Digit+;
    NumberWithDecimal   = '-'? Digit* '.' Digit+;
    Character           = :c ?(c >= 'A' && c <= 'z');
    Whitespace          = ' ';

    // Operators
    Plus                = '+';
    Asterisk            = '*';
    Operator            = Plus | Asterisk;

    // Numeric Literals
    LongSuffix          = 'l' | 'L';
    FloatSuffix         = 'f' | 'F';

    IntegerLiteral      = WholeNumber:n &Terminal -> { return Expression.Constant(int.Parse(n.Text())); };
    LongLiteral         = WholeNumber:n LongSuffix &Terminal -> { return Expression.Constant(long.Parse(n.Text())); };
    FloatLiteral        = Number:n FloatSuffix &Terminal -> { return Expression.Constant(float.Parse(n.Text())); };
    DoubleLiteral       = NumberWithDecimal:n &Terminal -> { return Expression.Constant(double.Parse(n.Text())); };

    NumericLiteral      = IntegerLiteral | LongLiteral | FloatLiteral | DoubleLiteral;

    // TimeSpan Literals
    DaysSuffix          = 'd' | 'D';
    MinutesSuffix       = 'm' | 'M';
    SecondsSuffix       = 's' | 'S';
    MillisecondsSuffix  = "ms" | "MS";

    DaysLiteral         = Number:n DaysSuffix &Terminal -> {
                            return Expression.Constant(TimeSpan.FromDays(double.Parse(n.Text())));
                        };
    MinutesLiteral      = Number:n MinutesSuffix &Terminal -> {
                            return Expression.Constant(TimeSpan.FromMinutes(double.Parse(n.Text())));
                        };
    SecondsLiteral      = Number:n SecondsSuffix &Terminal -> {
                            return Expression.Constant(TimeSpan.FromSeconds(double.Parse(n.Text())));
                        };
    MillisecondsLiteral = Number:n MillisecondsSuffix &Terminal -> {
                            return Expression.Constant(TimeSpan.FromMilliseconds(double.Parse(n.Text())));
                        };

    TimeSpanLiteral     = DaysLiteral | MinutesLiteral | SecondsLiteral | MillisecondsLiteral;

    Literal             = NumericLiteral | TimeSpanLiteral;

    IntegerValue        = IntegerLiteral;
    LongValue           = LongLiteral
                        | IntegerLiteral:lit -> {
                            return Expression.Convert(lit, typeof(long));
                        };
    FloatValue          = FloatLiteral
                        | (IntegerLiteral | LongLiteral):lit -> {
                            return Expression.Convert(lit, typeof(float));
                        };
    DoubleValue         = DoubleLiteral
                        | (IntegerLiteral | LongLiteral | FloatLiteral):lit -> {
                            return Expression.Convert(lit, typeof(double));
                        };

    MultiplyInteger     = MultiplyInteger:left Whitespace* Asterisk Whitespace* IntegerValue:right -> {
                            return Expression.Multiply(left, right);
                        }
                        | IntegerValue;
    MultiplyLong        = MultiplyLong:left Whitespace* Asterisk Whitespace* LongValue:right -> {
                            return Expression.Multiply(left, right);
                        }
                        | LongValue;
    MultiplyFloat       = MultiplyFloat:left Whitespace* Asterisk Whitespace* FloatValue:right -> {
                            return Expression.Multiply(left, right);
                        }
                        | FloatValue;
    MultiplyDouble      = MultiplyDouble:left Whitespace* Asterisk Whitespace* DoubleValue:right -> {
                            return Expression.Multiply(left, right);
                        }
                        | DoubleValue;

    IntegerExpr         = AddInteger
                        | MultiplyInteger
                        | IntegerValue;
    LongExpr            = IntegerExpr:expr -> {
                            return Expression.Convert(expr, typeof(int));
                        }
                        | AddLong
                        | MultiplyLong
                        | LongValue;
    FloatExpr           = (IntegerExpr | LongExpr):expr -> {
                            return Expression.Convert(expr, typeof(float));
                        }
                        | AddFloat
                        | MultiplyFloat
                        | FloatValue;
    DoubleExpr          = (IntegerExpr | LongExpr | FloatExpr):expr -> {
                            return Expression.Convert(expr, typeof(double));
                        }
                        | AddDouble
                        | MultiplyDouble
                        | DoubleValue;

    AddInteger          = AddInteger:left Whitespace* Plus Whitespace* MultiplyInteger:right -> {
                            return Expression.Add(left, right);
                        }
                        | MultiplyInteger:left Whitespace* Plus Whitespace* MultiplyInteger:right -> {
                            return Expression.Add(left, right);
                        };

    AddLong             = AddLong:left Whitespace* Plus Whitespace* MultiplyLong:right -> {
                            return Expression.Add(left, right);
                        }
                        | AddInteger:left Whitespace* Plus Whitespace* MultiplyLong:right -> {
                            return Expression.Add(Expression.Convert(left, typeof(long)), right);
                        }
                        | MultiplyLong:left Whitespace* Plus Whitespace* MultiplyLong:right -> {
                            return Expression.Add(left, right);
                        };

    AddFloat            = AddFloat:left Whitespace* Plus Whitespace* MultiplyFloat:right -> {
                            return Expression.Add(left, right);
                        }
                        | AddInteger:left Whitespace* Plus Whitespace* MultiplyFloat:right -> {
                            return Expression.Add(Expression.Convert(left, typeof(float)), right);
                        }
                        | MultiplyFloat:left Whitespace* Plus Whitespace* MultiplyFloat:right -> {
                            return Expression.Add(left, right);
                        };

    AddDouble           = AddDouble:left Whitespace* Plus Whitespace* MultiplyDouble:right -> {
                            return Expression.Add(left, right);
                        }
                        | AddFloat:left Whitespace* Plus Whitespace* MultiplyDouble:right -> {
                            return Expression.Add(Expression.Convert(left, typeof(double)), right);
                        }
                        | MultiplyDouble:left Whitespace* Plus Whitespace* MultiplyDouble:right -> {
                            return Expression.Add(left, right);
                        };

    Expr                = AddInteger ~.
                        | AddLong ~.
                        | AddFloat ~.
                        | AddDouble ~.
                        | MultiplyInteger ~.
                        | MultiplyLong ~.
                        | MultiplyFloat ~.
                        | MultiplyDouble ~.
                        | Literal ~.;
}
